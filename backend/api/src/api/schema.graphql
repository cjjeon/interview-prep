schema {
    query: Query
    mutation: Mutation
}

type Company {
    id: ID!
    name: String!
}

type CompanyDescription {
    id: ID!
    description: String!
    company: Company!
}
type User {
    email: String!
    firstName: String!
    lastName: String!
}

type Skill {
    id: ID!
    name: String!
}

type Role {
    id: ID!
    name: String!
}

type RoleSkills {
    id: ID!
    name: String!
    skills: [Skill]
}

type Experience {
    id: ID!
    summary: String!
    situation: String
    action: String
    outcome: String
}

type CompaniesResult {
    companies: [Company]
}

type CompanyDescriptionResult {
    companyDescription: CompanyDescription
}

type CompanyDescriptionsResult {
    companyDescriptions: [CompanyDescription]
}

type UserResult {
    user: User
}

type RoleSkillsResult {
    roleSkill: RoleSkills
}

type RolesResult {
    roles: [Role]
}

type SkillsResult {
    skills: [Skill]
}

type ExperienceResult {
    experience: Experience
}

type ExperiencesResult {
    experiences: [Experience]
}

type Query {
    searchCompanies(filterName: String): CompaniesResult
    companyDescriptions: CompanyDescriptionsResult!
    companyDescription(companyId: ID!): CompanyDescriptionResult!
    searchRoles(filterName: String): RolesResult
    experiences(companyDescriptionId: ID, roleId: ID): ExperiencesResult!
    skills(filterName: String, companyDescriptionId: ID, roleId: ID, limit: Int): SkillsResult!
    user: UserResult!
}

type Mutation {
    createCompanyDescription(name: String!, description: String!): CompanyDescriptionResult!
    createRole(companyDescriptionId: ID!, role: String!, skills: [String]!): RoleSkillsResult!
    createExperience(summary: String!, situation: String!, action: String!, outcome: String!, skills: [String]!):  ExperienceResult!
}